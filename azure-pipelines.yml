---
# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - pizzafactory

schedules:
  - cron: "20 12 * * *"
    displayName: Daily build
    branches:
      include:
        - pizzafactory
    always: true

variables:
  containerRegistry: camino.azurecr.io
  organization: eclipse
  imageTag: nightly

jobs:
  - job: build
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - script: ./build.sh -r $(containerRegistry) -o $(organization) -t $(imageTag) --offline
        displayName: 'Build registry'

      - task: Docker@1
        inputs:
          command: login
          containerregistrytype: Container Registry
          dockerRegistryEndpoint: camino.azurecr.io

      - script: docker push $(containerRegistry)/$(organization)/che-devfile-registry:$(imageTag)
        displayName: 'push to ACR'
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/pizzafactory'))

  - job: build_image
    dependsOn:
      - build
    condition: and(succeeded('build'), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/pizzafactory'))
    timeoutInMinutes: 120
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - script: arbitrary-users-patch/build_images.sh --push
        displayName: 'Build and push patched images.'
        env:
          REGISTRY: 'camino.azurecr.io'

  - job: import
    dependsOn:
      - build
    condition: and(succeeded('build'), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/pizzafactory'))
    timeoutInMinutes: 120
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
      - task: AzureCLI@2
        displayName: 'Imports images'
        inputs:
          azureSubscription: 'camino: BizSpark (1fbdb4bb-441e-4922-ba1f-ffd04f533ea1)'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: 'git grep ''  image:'' devfiles | awk ''!/camino.azurecr.io|quay.io\/eclipse/ { print $NF }'' | sort | uniq | awk ''{print "az acr import --force --name camino --source " $0 }''| sh -x'
